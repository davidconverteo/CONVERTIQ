
'use server';
/**
 * @fileOverview A flow that generates a structured report from a user prompt.
 *
 * - createReportFromPrompt - A function that takes a prompt and returns a structured report object.
 * - CreateReportFromPromptInput - The input type for the createReportFromPrompt function.
 * - CreateReportFromPromptOutput - The return type for the createReportFromPrompt function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getDataSummary, DataCategorySchema } from '@/services/data-service';

// --- Input and Output Schemas ---

const CreateReportFromPromptInputSchema = z.object({
  prompt: z.string().describe("The user's question or request for a report."),
});
export type CreateReportFromPromptInput = z.infer<typeof CreateReportFromPromptInputSchema>;


const KpiWidgetSchema = z.object({
    type: z.literal('kpi'),
    title: z.string().describe('The title of the KPI.'),
    value: z.string().describe('The main value of the KPI.'),
    trend: z.string().optional().describe('The trend information for the KPI (e.g., "+5% vs YA").'),
});

const BarChartWidgetSchema = z.object({
    type: z.literal('barchart'),
    title: z.string().describe('The title of the bar chart.'),
    data: z.array(z.object({
        name: z.string().describe('The name of the category/bar.'),
        value: z.number().describe('The value for the bar.'),
    })).describe('The data for the bar chart.'),
});

const PieChartWidgetSchema = z.object({
    type: z.literal('piechart'),
    title: z.string().describe('The title of the pie chart.'),
    data: z.array(z.object({
        name: z.string().describe('The name of the slice.'),
        value: z.number().describe('The value for the slice.'),
    })).describe('The data for the pie chart.'),
});

const SummaryWidgetSchema = z.object({
    type: z.literal('summary'),
    title: z.string().describe('The title for the summary (e.g., "AI Summary").'),
    text: z.string().describe('The full, insightful summary text generated by the AI.'),
});

const ReportWidgetSchema = z.union([
    KpiWidgetSchema,
    BarChartWidgetSchema,
    PieChartWidgetSchema,
    SummaryWidgetSchema,
]);
export type ReportWidget = z.infer<typeof ReportWidgetSchema>;


const CreateReportFromPromptOutputSchema = z.object({
    title: z.string().describe('A clear and concise title for the generated report.'),
    widgets: z.array(ReportWidgetSchema).describe('An array of widget objects that make up the report.'),
});
export type CreateReportFromPromptOutput = z.infer<typeof CreateReportFromPromptOutputSchema>;


// --- Genkit Tool ---
const getDataSummaryTool = ai.defineTool(
    {
        name: 'getDataSummary',
        description: 'Get a summary of data for a specific category (e.g., mediaBrand, retailMedia, mmm). Use this to gather information to build the report.',
        inputSchema: z.object({
            category: DataCategorySchema,
        }),
        outputSchema: z.any(),
    },
    async ({ category }) => {
        return getDataSummary(category);
    }
);


// --- Genkit Prompt ---
const prompt = ai.definePrompt({
  name: 'createReportFromPrompt',
  input: {schema: CreateReportFromPromptInputSchema},
  output: {schema: CreateReportFromPromptOutputSchema},
  tools: [getDataSummaryTool],
  prompt: `You are an expert marketing analyst AI. Your task is to build a structured report based on the user's prompt.
  
  1.  **Analyze the User's Prompt:** Understand the core question and the data required.
  2.  **Use Tools:** Use the 'getDataSummary' tool to fetch the necessary data. You can call it for 'mediaBrand', 'retailMedia', or 'mmm' categories.
  3.  **Synthesize and Structure:** Based on the data retrieved, construct a report by choosing the most appropriate widgets.
  4.  **Widget Selection:**
      *   Use 'kpi' widgets for single, important metrics (e.g., Global ROAS, Total Spend).
      *   Use 'barchart' or 'piechart' to visualize comparisons or distributions.
      *   Use a 'summary' widget to provide a concise, actionable AI-powered insight and recommendation at the end.
  5.  **Generate Output:** Create a clear title for the report and assemble the chosen widgets into the final JSON output. Ensure the data in charts is correctly formatted as an array of objects with 'name' and 'value'.

  User's Prompt: {{{prompt}}}`,
});

// --- Genkit Flow ---
const createReportFlow = ai.defineFlow(
  {
    name: 'createReportFlow',
    inputSchema: CreateReportFromPromptInputSchema,
    outputSchema: CreateReportFromPromptOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error('The AI failed to generate a report structure.');
    }
    return output;
  }
);


// --- Exported Function ---
export async function createReportFromPrompt(input: CreateReportFromPromptInput): Promise<CreateReportFromPromptOutput> {
  return createReportFlow(input);
}
